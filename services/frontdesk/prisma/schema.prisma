// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model RoomType {
  id             String   @id @default(cuid())
  name           String
  description    String?
  maxOccupancy   Int @default(1)
  adultOccupancy Int @default(1)
  childOccupancy Int @default(1)
  baseRate       Decimal  @default(0) @db.Decimal(10, 2)
  hotelId        String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  Room           Room[]

  @@unique([hotelId, name])
}

model Room {
  id                String             @id @default(cuid())
  roomNumber        String
  status            RoomStatus         @default(AVAILABLE)
  floor             Int
  description       String?
  roomTypeId        String
  connectedRooms    Room[]             @relation("RoomConnections")
  connectingRooms   Room[]             @relation("RoomConnections")
  Amenities         Amenity[]          @relation("RoomAmenities")
  photos            String[]           @default([])
  roomType          RoomType           @relation(fields: [roomTypeId], references: [id])
  hotelId           String
  reservations      Reservation[]      @relation("ReservationRooms")
  houseKeepingTasks HouseKeepingTask[]
  maintenanceTask   Maintenance[]

  @@unique([hotelId, roomNumber])
}

model RatePlan {
  id          String        @id @default(cuid())
  hotelId     String
  code        String // “BAR”, “CORP10”
  name        String
  baseAdjType AdjType // PERCENT | FIXED
  baseAdjVal  Decimal       @db.Decimal(6, 2) // +10 % or –15 USD
  currencyId  String
  currency    Currency      @relation(fields: [currencyId], references: [id])
  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  reservation Reservation[]

  @@unique([hotelId, code])
}

model ExchangeRate {
  id             String   @id @default(cuid())
  baseCurrency   String
  targetCurrency String
  rate           Decimal  @db.Decimal(18, 6)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  base           Currency @relation("BaseCurrency", fields: [baseCurrency], references: [code])
  target         Currency @relation("TargetCurrency", fields: [targetCurrency], references: [code])
  hotelId        String

  @@unique([baseCurrency, targetCurrency, hotelId])
}

model Currency {
  id          String         @id @default(cuid())
  code        String         @unique
  name        String
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  baseRates   ExchangeRate[] @relation("BaseCurrency")
  targetRates ExchangeRate[] @relation("TargetCurrency")
  RatePlan    RatePlan[]
}

model Amenity {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  hotelId   String

  Room Room[] @relation("RoomAmenities")
}

model Folio {
  id             String        @id @default(cuid())
  status         FolioStatus   @default(OPEN)
  balance        Decimal       @default(0) @db.Decimal(10, 4)
  folioItems     FolioItem[]
  hotelId        String
  reservationId  String?       @unique
  reservation    Reservation?  @relation(fields: [reservationId], references: [id])
  // Master folio for group bookings (new)
  groupBookingId String?       @unique
  groupBooking   GroupBooking? @relation("GroupMasterFolio", fields: [groupBookingId], references: [id])

  // Folio hierarchy for charge routing
  parentFolioId String?
  parentFolio   Folio?  @relation("FolioHierarchy", fields: [parentFolioId], references: [id])
  childFolios   Folio[] @relation("FolioHierarchy")

  // Folio type to distinguish between individual and master
  folioType FolioCreationType @default(INDIVIDUAL)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FolioItem {
  id         String    @id @default(cuid())
  folioId    String
  Folio      Folio     @relation(fields: [folioId], references: [id])
  itemType   FolioType
  amount     Decimal   @db.Decimal(10, 4)
  quantity   Int       @default(1)
  unitPrice  Decimal?  @db.Decimal(10, 4)
  isVoided   Boolean   @default(false)
  voidReason String?
  voidedAt   DateTime?
  voidedBy   String?
}

model Reservation {
  id         String            @id @default(cuid())
  checkIn    DateTime
  checkOut   DateTime
  status     ReservationStatus @default(HELD)
  guestId    String
  rooms      Room[]            @relation("ReservationRooms")
  hotelId    String
  ratePlanId String
  ratePlan   RatePlan          @relation(fields: [ratePlanId], references: [id])
  folio      Folio?
  price      Decimal           @db.Decimal(10, 2)

  // Group booking relationship
  groupBookingId String?
  groupBooking   GroupBooking? @relation(fields: [groupBookingId], references: [id])

  // Charge routing preference
  chargeRouting ChargeRouting @default(OWN_FOLIO)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model HouseKeepingTask {
  id          String             @id @default(cuid())
  roomId      String
  userId      String
  room        Room               @relation(fields: [roomId], references: [id])
  priority    Priority           @default(MEDIUM)
  status      RoomCleaningStatus
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model Maintenance {
  id          String            @id @default(cuid())
  description String
  priority    String
  status      maintenanceStatus @default(PENDING)

  roomId   String? // optional foreign key
  outletId String? // optional foreign key

  room        Room?     @relation(fields: [roomId], references: [id])
  // outlet      Outlet?  @relation(fields: [outletId], references: [id])
  startedAt   DateTime?
  completedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model GroupBooking {
  id              String             @id @default(cuid())
  groupProfileId  String
  checkIn         DateTime
  checkOut        DateTime
  status          GroupBookingStatus @default(DRAFT)
  specialRequests String?
  notes           String?
  hotelId         String
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  // Relations
  reservations Reservation[]
  masterFolio  Folio?        @relation("GroupMasterFolio")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum FolioCreationType {
  INDIVIDUAL
  MASTER
}

enum RoomCleaningStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum maintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum FolioType {
  ROOM_CHARGE
  FOOD_BEVERAGE
  TELEPHONE
  LAUNDRY
  SPA
  MINIBAR
  PARKING
  WIFI
  TAX
  CITY_TAX
  SERVICE_CHARGE
  INCIDENTAL
  PAYMENT_CASH
  PAYMENT_CARD
  PAYMENT_TRANSFER
  ADJUSTMENT_CREDIT
  ADJUSTMENT_DEBIT
  COMP // Complimentary
  VOID
}

enum FolioStatus {
  OPEN
  CLOSED
  VOIDED
  TRANSFERRED
}

enum RoomStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  DIRTY
  CLEANING
  RESERVED
  OUT_OF_SERVICE
}

enum AdjType {
  PERCENT
  FIXED
}

enum ReservationStatus {
  DRAFT
  CONFIRMED
  CHECKED_IN
  CHECKED_OUT
  CANCELLED
  NO_SHOW
  HELD
}

enum GroupBookingStatus {
  DRAFT
  CONFIRMED
  PARTIALLY_CHECKED_IN
  CHECKED_IN
  PARTIALLY_CHECKED_OUT
  CHECKED_OUT
  CANCELLED
}

enum ChargeRouting {
  OWN_FOLIO // Charges go to individual folio
  MASTER_FOLIO // Charges go to master folio
  SPLIT // Some charges to individual, some to master
}
